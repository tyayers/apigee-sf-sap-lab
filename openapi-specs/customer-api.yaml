# Example OpenAPI YAML to get you started quickly.
# Note: YAML has indentation based coping.
# Code completion support is available so start typing for
# available options.
# This example follows the recommendations of the API 
# Improvement Proposals for common API patterns. Find more
# at https://google.aip.dev/

# Find the full OpenAPI reference at:
# https://github.com/OAI/OpenAPI-Specification
openapi: 3.0.3

# This is your document metadata.
info:
  version: 0.0.1
  title: Customer API
  description: |
    API for Customers.

    This API follows the recommendations of the
    [Google API Improvement Proposals](https://google.aip.dev/).

# Servers where this API is hosted
servers: 
  - url: https://emea-poc13-test.apigee.net/business-objects-api

# Describe your paths here
paths:
  # This is a endpoint path.
  '/customers':
    # This is an HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      summary: 'List `Sales customer` objects.'
      description: |
        Retrieve a page of `Sales customer` objects from the server. 
        Follows the standards for parameters from the
        [List AIP](  https://aip.dev/132).
      # This is an array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        - name: pageSize
          in: query
          description: |
            Max size of returned list. 
          schema:
            type: integer
            default: 25
        - name: pageToken
          in: query
          description: |
            A page token recieved from the previous list call.
            Provide this to retrieve the next page.
          schema:
            type: string
        - name: customerBy
          in: query
          description: |
            The customering of the returned list. See the
            [List customering AIP](  https://aip.dev/132) for 
            details on the formatting of this field.
          schema:
            type: string
            default: 'displayName'
        - name: filter
          in: query
          description: |
            Filter that will be used to select Person objects to
            return. See the [Filtering AIP](https://aip.dev/160)
            for usage and details on the filtering grammar.
          schema:
            type: string
      responses:
        # Response code
        '201':
          description: Successful response
          # Response body content.
          content:
            # JSON response with a schema referenced from the  
            # components object.
            application/json:
              schema:
                type: object
                properties:
                  persons:
                    type: array
                    items:
                      $ref: '#/components/schemas/ListOfcustomers'
                  nextPageToken:
                    description: |
                      A token which can be sent as `pageToken`
                      to retrieve the next page.
                    type: string            
    post:
      summary: Creates a new Sales customer
      description: Creates a new Sales customer
      requestBody:
        description: Sales customer object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
      # Expected responses for this operation:
      responses:
        # Response code
        '201':
          description: Successful response
          # Response body content.
          content:
            # JSON response with a schema referenced from the  
            # components object.
            application/json:
              schema:
                type: object
                properties:
                  persons:
                    type: array
                    items:
                      $ref: '#/components/schemas/ListOfcustomers'
                  nextPageToken:
                    description: |
                      A token which can be sent as `pageToken`
                      to retrieve the next page.
                    type: string
  '/customers/{customer}':
    get:
      description: 'Retrieve a single Person object.'
      parameters:
        - name: customer
          in: path
          description: |
            Unique identifier of the desired customer object.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer'
        '404':
          description: 'customer was not found'

# Reusable components of your API belong here. Utilize
# components with JSON references.
components:
  # Schemas is a map of names to Schema objects
  schemas:
    # A list of customer objects
    ListOfcustomers:
      title: List of Sales customers
      type: array
      items:
        $ref: '#/components/schemas/customer'
    # A single customer object
    customer:
      title: customer
      type: object
      properties:
        BusinessPartner:
          description: |
            [Resource Name](https://aip.dev/122) of an customer.
            Format: `customers/{customerId}`
          type: string
          example: "customers/a353-x51d"
          pattern: 'customers\/[a-z0-9-]+'
        BusinessPartnerCategory:
          description: 'Category code of the customer.'
          type: string
          example: "OHR"
        BusinessPartnerFullName:
          description: 'The sales organization of the customer'
          type: string
        BusinessPartnerGrouping:
          description: 'The sales distribution channel of the customer'
          type: string    
        BusinessPartnerName:
          description: 'The name of the customer'
          type: string
        BusinessPartnerUUID:
          description: 'The UUID of the customer'
          type: string
